**Python Code: Implementing Insertion Sort**

Insertion sort is a simple and intuitive sorting algorithm that builds the final sorted array one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. However, it is efficient for small data sets and is often used for educational purposes.

Here is a Python implementation of the insertion sort algorithm:

```python
def insertion_sort(arr):
# Traverse through 1 to len(arr)
for i in range(1, len(arr)):
key = arr[i]

# Move elements of arr[0..i-1], that are greater than key,
# to one position ahead of their current position
j = i - 1
while j >= 0 and key < arr[j]:
arr[j + 1] = arr[j]
j -= 1
arr[j + 1] = key

# Example usage
if __name__ == "__main__":
# Sample array
arr = [12, 11, 13, 5, 6]

print("Original array:", arr)

# Sort the array
insertion_sort(arr)

print("Sorted array:", arr)
```

**Explanation:**

1. The `insertion_sort` function takes a list `arr` as input.
2. It iterates through the list starting from the second element (index 1) to the end.
3. For each element, it stores the value in the variable `key`.
4. It then compares the `key` with the elements before it in the list and shifts any elements that are greater than `key` one position to the right.
5. Finally, it places the `key` in its correct position.

**Example Execution:**

For the array `[12, 11, 13, 5, 6]`, the algorithm will proceed as follows:

1. `i = 1`, `key = 11`
- Compare 11 with 12, swap positions.
- Array becomes `[11, 12, 13, 5, 6]`

2. `i = 2`, `key = 13`
- 13 is already in the correct position.
- Array remains `[11, 12, 13, 5, 6]`

3. `i = 3`, `key = 5`
- Compare 5 with 13, 12, and 11, swap positions.
- Array becomes `[5, 11, 12, 13, 6]`

4. `i = 4`, `key = 6`
- Compare 6 with 13, 12, 11, and 5, swap positions.
- Array becomes `[5, 6, 11, 12, 13]`

The final sorted array is `[5, 6, 11, 12, 13]`.

This implementation of insertion sort is straightforward and easy to understand, making it a good starting point for learning about sorting algorithms.